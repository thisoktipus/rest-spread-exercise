//refactor this to use rest operator and arrow functions//

function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function (num) {
    return num % 2 === 0;
  });
}

const filterOutOdds = (...arguments) =>
  arguments.filter((num) => num % 2 === 0);

//Write a function called findMin that accepts a variable number of arguments and returns the smallest argument. Make sure to do this using the rest and spread operator.//

// const findMin = (...arguments) =>
//   arguments.reduce((min, currentValue) =>
//     min < currentValue ? min : currentValue
//   );

const findMin = (...arguments) => Math.min(...arguments);

//Write a function called mergeObjects that accepts two objects and returns a new object which contains all the keys and values of the first object and second object.//

const mergeObjects = (object1, object2) => ({ ...object1, ...object2 });

//Write a function called doubleAndReturnArgs which accepts an array and a variable number of arguments. The function should return a new array with the original array values and all of additional arguments doubled.//

const doubleAndReturnArgs = (array, ...arguments) => [
  ...array,
  ...arguments.map((value) => value * 2),
];

/** remove a random element in the items array
and return a new array without that item. */

const removeRandom = (items) => {
  let index = Math.floor(Math.random() * items.length);
  return [...items.slice(0, index), ...items.slice(index + 1)];
};

/** Return a new array with every item in array1 and array2. */

const extend = (array1, array2) => [...array1, ...array2];

/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal = (object, key, value) => {
  let newObject = { ...object };
  newObject[key] = value;
  return newObject;
};

/** Return a new object with a key removed. */
const removeKey = (object, key) => {
    let newObject = { ...object };
    delete newObject[key];
    return newObject;
}

/** Combine two objects and return a new object. */
const combine = (object1, object2) => {
    return {...object1, ...object2};
}

/** Return a new object with a modified key and value. */
const update = (object, key, value) => {
    let newObject = { ...object };
    newObject[key] = value;
    return newObject;
}